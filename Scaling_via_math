include("scaling_code.jl")

using SpecialFunctions
using LinearAlgebra

A = alpha_scaled * im^(3/2)
t = 0.857 # Define a time point for velocity, in this case it is the max
w = f * 2* pi

# Precompute Bessel functions
J0_A = besselj(0, A)
J1_A = besselj(1, A)

shear_stresses = []
p_primes_list = []

# Center line velocity ~ experimental data
for u in u_scaled
    # Find P' using centerline velocity
    numerator = abs(im * rho * w * J0_A)
    denomiator = abs(1-J0_A)
    p_mag = u * numerator / denomiator

    # Find complex pressure and the phase of that pressure
    complex = (im / rho * w) * J1_A / (1 - J0_A)
    p_phase = angle(complex)

    # Calculate the complex pressure P'
    p_prime = p_mag * cis(p_phase)
    push!(p_primes_list, p_prime)

    # Find shear stress
    tau = p_prime * (r_scaled / A) * (J1_A / J0_A) * exp(im * w * t)
    tau_scaled = real(tau)

    push!(shear_stresses, tau_scaled)
end

p_primes_real = real.(p_primes_list)

println("Shear stresses: ", shear_stresses)

# Solve for velocities given constant shear stress
velocities_from_shear = []

for tau_const in shear_stresses
    shear_magnitude = abs((r_scaled / A) * (J1_A / J0_A))
    p_prime_magnitude = abs(tau_const) / (shear_magnitude * 0.5)  # Factor of 0.5 for time averaging
    
    # Convert back to velocity
    numerator = abs(im * rho * w * J0_A)
    denominator = abs(1 - J0_A)
    
    u_calculated = p_prime_magnitude * denominator / numerator
    push!(velocities_from_shear, u_calculated)
end

println("Velocities from shear (v2): ", velocities_from_shear)

